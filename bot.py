#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üê± –ö–æ—Ç–∏–∫-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è Telegram
–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
"""

import logging
import sqlite3
import asyncio
import os
from datetime import datetime, timedelta, time
from typing import Optional, List
import json

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    MessageHandler, filters, ContextTypes, ConversationHandler
)

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –¥–ª—è —Ä–æ–∑–º–æ–≤
ADDING_EVENT_NAME, ADDING_EVENT_DATE, ADDING_EVENT_TIME, ADDING_EVENT_DESC = range(4)
ADDING_BIRTHDAY_NAME, ADDING_BIRTHDAY_DATE = range(2)

# –ö–æ—Ç—è—á—ñ –µ–º–æ–¥–∑—ñ
CAT = {
    'happy': 'üò∏', 'sleepy': 'üò¥', 'excited': 'üôÄ', 'heart': 'üòª',
    'wink': 'üòâ', 'cool': 'üòé', 'thinking': 'ü§î', 'alarm': '‚è∞',
    'calendar': 'üìÖ', 'birthday': 'üéÇ'
}

class CatPlannerBot:
    def __init__(self, token: str):
        self.token = token
        self.db_name = 'cat_planner.db'
        self.init_database()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫
        self.app = Application.builder().token(token).build()
        
        # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –≤—Å—ñ –æ–±—Ä–æ–±–Ω–∏–∫–∏
        self.setup_handlers()
    
    def init_database(self):
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                first_name TEXT,
                username TEXT,
                timezone TEXT DEFAULT 'Europe/Kiev',
                morning_time TEXT DEFAULT '08:00',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –ü–æ–¥—ñ—ó
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS events (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                title TEXT NOT NULL,
                description TEXT,
                event_date DATE,
                event_time TIME,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS birthdays (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                name TEXT NOT NULL,
                birth_date DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                file_id TEXT,
                caption TEXT,
                photo_date DATE DEFAULT CURRENT_DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def setup_handlers(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤"""
        
        # –û—Å–Ω–æ–≤–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
        self.app.add_handler(CommandHandler("start", self.start))
        self.app.add_handler(CommandHandler("help", self.help))
        
        # –†–æ–∑–º–æ–≤–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        event_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_add_event, pattern='^add_event$')],
            states={
                ADDING_EVENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_event_name)],
                ADDING_EVENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_event_date)],
                ADDING_EVENT_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_event_time)],
                ADDING_EVENT_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_event)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel, pattern='^cancel$')],
            per_message=False
        )
        
        birthday_conv = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.start_add_birthday, pattern='^add_birthday$')],
            states={
                ADDING_BIRTHDAY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_birthday_name)],
                ADDING_BIRTHDAY_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.save_birthday)],
            },
            fallbacks=[CallbackQueryHandler(self.cancel, pattern='^cancel$')],
            per_message=False
        )
        
        self.app.add_handler(event_conv)
        self.app.add_handler(birthday_conv)
        
        # –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        self.app.add_handler(CallbackQueryHandler(self.main_menu, pattern='^menu$'))
        self.app.add_handler(CallbackQueryHandler(self.today, pattern='^today$'))
        self.app.add_handler(CallbackQueryHandler(self.week, pattern='^week$'))
        self.app.add_handler(CallbackQueryHandler(self.my_events, pattern='^my_events$'))
        self.app.add_handler(CallbackQueryHandler(self.birthdays, pattern='^birthdays$'))
        self.app.add_handler(CallbackQueryHandler(self.settings, pattern='^settings$'))
        self.app.add_handler(CallbackQueryHandler(self.help, pattern='^help$'))
        self.app.add_handler(CallbackQueryHandler(self.photo_menu, pattern='^photos$'))
        self.app.add_handler(CallbackQueryHandler(self.my_photos, pattern='^my_photos$'))
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        self.app.add_handler(CallbackQueryHandler(self.change_timezone_menu, pattern='^change_tz$'))
        self.app.add_handler(CallbackQueryHandler(self.change_time_menu, pattern='^change_time$'))
        self.app.add_handler(CallbackQueryHandler(self.set_timezone, pattern='^tz_'))
        self.app.add_handler(CallbackQueryHandler(self.set_time, pattern='^time_'))
        
        # –§–æ—Ç–æ
        self.app.add_handler(MessageHandler(filters.PHOTO, self.handle_photo))
        
        # –¢–µ–∫—Å—Ç–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text))
    
    def get_keyboard(self):
        """–ì–æ–ª–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞"""
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton(f"{CAT['calendar']} –°—å–æ–≥–æ–¥–Ω—ñ", callback_data='today'),
                InlineKeyboardButton(f"{CAT['calendar']} –¢–∏–∂–¥–µ–Ω—å", callback_data='week')
            ],
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é", callback_data='add_event'),
                InlineKeyboardButton(f"{CAT['birthday']} –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è", callback_data='add_birthday')
            ],
            [
                InlineKeyboardButton("üìã –ú–æ—ó –ø–æ–¥—ñ—ó", callback_data='my_events'),
                InlineKeyboardButton(f"{CAT['birthday']} –Ü–º–µ–Ω–∏–Ω–Ω–∏–∫–∏", callback_data='birthdays')
            ],
            [
                InlineKeyboardButton("üì∑ –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É", callback_data='photos'),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", callback_data='settings')
            ],
            [
                InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data='help')
            ]
        ])
    
    # === –û–°–ù–û–í–ù–Ü –ö–û–ú–ê–ù–î–ò ===
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏"""
        user = update.effective_user
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—É
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('INSERT OR REPLACE INTO users (user_id, first_name, username) VALUES (?, ?, ?)',
                      (user.id, user.first_name, user.username))
        conn.commit()
        conn.close()
        
        message = f"""
{CAT['heart']} –ú—è—É! –ü—Ä–∏–≤—ñ—Ç, {user.first_name}!

–Ø —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –∫–æ—Ç–∏–∫-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫! {CAT['happy']}

–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ:
‚Ä¢ {CAT['calendar']} –ü–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó —Ç–∞ –∑–∞–≤–¥–∞–Ω–Ω—è
‚Ä¢ {CAT['alarm']} –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –≤–∞–∂–ª–∏–≤—ñ —Å–ø—Ä–∞–≤–∏
‚Ä¢ {CAT['birthday']} –ù–µ –∑–∞–±—É–≤–∞—Ç–∏ –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
‚Ä¢ üì± –ó–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤
‚Ä¢ üåÖ –ù–∞–¥—Å–∏–ª–∞—Ç–∏ —Ä–∞–Ω–∫–æ–≤–∏–π –ø–ª–∞–Ω –¥–Ω—è

–û–±–µ—Ä–∏ —â–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏:
        """
        
        await update.message.reply_text(message, reply_markup=self.get_keyboard())
    
    async def main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['happy']} –©–æ –±—É–¥–µ–º–æ –ø–ª–∞–Ω—É–≤–∞—Ç–∏?"
        await query.edit_message_text(message, reply_markup=self.get_keyboard())
    
    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–î–æ–ø–æ–º–æ–≥–∞"""
        help_text = f"""
{CAT['thinking']} –û—Å—å —â–æ —è –≤–º—ñ—é:

üìÖ **–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ–π:**
‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –ø–æ–¥—ñ—ó –∑ –¥–∞—Ç–æ—é —Ç–∞ —á–∞—Å–æ–º
‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –Ω–∞ –¥–µ–Ω—å/—Ç–∏–∂–¥–µ–Ω—å
‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è

üéÇ **–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:**
‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥—Ä—É–∑—ñ–≤
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞—Ç–∏ –æ 00:00 –ø—Ä–æ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤
‚Ä¢ –ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∫—ñ–≤ –≤–∏–ø–æ–≤–Ω—é—î—Ç—å—Å—è

üì∑ **–§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤:**
‚Ä¢ –ù–∞–¥—Å–∏–ª–∞–π –º–µ–Ω—ñ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É
‚Ä¢ –Ø –∑–±–µ—Ä–µ–∂—É —ó—Ö —ñ –ø–æ–∫–∞–∂—É –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ
‚Ä¢ –ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ

‚è∞ **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:**
‚Ä¢ –†–∞–Ω–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –æ 8:00)
‚Ä¢ –ú–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö
‚Ä¢ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ –ø—ñ–≤–Ω–æ—á—ñ

{CAT['wink']} –ü—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–∫–∞–π –∫–Ω–æ–ø–∫–∏ —ñ —è –≤—Å–µ –∑—Ä–æ–±–ª—é!
        """
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]])
        
        if update.callback_query:
            await update.callback_query.answer()
            await update.callback_query.edit_message_text(help_text, reply_markup=keyboard)
        else:
            await update.message.reply_text(help_text, reply_markup=keyboard)
    
    # === –î–û–î–ê–í–ê–ù–ù–Ø –ü–û–î–Ü–ô ===
    
    async def start_add_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['thinking']} –Ø–∫ –Ω–∞–∑–≤–µ–º–æ –ø–æ–¥—ñ—é? –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤—É:"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel')]])
        await query.edit_message_text(message, reply_markup=keyboard)
        
        return ADDING_EVENT_NAME
    
    async def get_event_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Ä–∏–º—É—î–º–æ –Ω–∞–∑–≤—É –ø–æ–¥—ñ—ó"""
        context.user_data['event_name'] = update.message.text
        
        message = f"{CAT['calendar']} –ß—É–¥–æ–≤–æ! –¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ –¥–∞—Ç—É.\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12.2024)\n–ê–±–æ –Ω–∞–ø–∏—à–∏ '—Å—å–æ–≥–æ–¥–Ω—ñ' –∞–±–æ '–∑–∞–≤—Ç—Ä–∞'"
        await update.message.reply_text(message)
        
        return ADDING_EVENT_DATE
    
    async def get_event_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Ä–∏–º—É—î–º–æ –¥–∞—Ç—É –ø–æ–¥—ñ—ó"""
        date_text = update.message.text.lower().strip()
        
        try:
            if date_text == '—Å—å–æ–≥–æ–¥–Ω—ñ':
                event_date = datetime.now().date()
            elif date_text == '–∑–∞–≤—Ç—Ä–∞':
                event_date = datetime.now().date() + timedelta(days=1)
            else:
                event_date = datetime.strptime(date_text, '%d.%m.%Y').date()
            
            context.user_data['event_date'] = event_date
            
            message = f"{CAT['alarm']} –í–∫–∞–∂–∏ —á–∞—Å –ø–æ–¥—ñ—ó.\n\n–§–æ—Ä–º–∞—Ç: –ì–ì:–•–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15:30)\n–ê–±–æ –Ω–∞–ø–∏—à–∏ '–≤–µ—Å—å –¥–µ–Ω—å'"
            await update.message.reply_text(message)
            
            return ADDING_EVENT_TIME
            
        except ValueError:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 25.12.2024)")
            return ADDING_EVENT_DATE
    
    async def get_event_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Ä–∏–º—É—î–º–æ —á–∞—Å –ø–æ–¥—ñ—ó"""
        time_text = update.message.text.lower().strip()
        
        if time_text == '–≤–µ—Å—å –¥–µ–Ω—å':
            context.user_data['event_time'] = None
        else:
            try:
                event_time = datetime.strptime(time_text, '%H:%M').time()
                context.user_data['event_time'] = event_time
            except ValueError:
                await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15:30)")
                return ADDING_EVENT_TIME
        
        message = f"{CAT['thinking']} –î–æ–¥–∞–π –æ–ø–∏—Å –ø–æ–¥—ñ—ó (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ):\n\n–ê–±–æ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'"
        await update.message.reply_text(message)
        
        return ADDING_EVENT_DESC
    
    async def save_event(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ–¥—ñ—é"""
        description = update.message.text.strip()
        if description.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏':
            description = None
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
        user_id = update.effective_user.id
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            INSERT INTO events (user_id, title, description, event_date, event_time)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, context.user_data['event_name'], description,
              context.user_data['event_date'], context.user_data['event_time']))
        conn.commit()
        conn.close()
        
        # –ì–æ—Ç—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        event_date = context.user_data['event_date']
        event_time = context.user_data['event_time']
        time_str = event_time.strftime('%H:%M') if event_time else '–í–µ—Å—å –¥–µ–Ω—å'
        
        message = f"""
{CAT['excited']} –ß—É–¥–æ–≤–æ! –ü–æ–¥—ñ—è –¥–æ–¥–∞–Ω–∞:

üìÖ **{context.user_data['event_name']}**
üóì –î–∞—Ç–∞: {event_date.strftime('%d.%m.%Y')}
üïê –ß–∞—Å: {time_str}
{f"üìù –û–ø–∏—Å: {description}" if description else ""}

{CAT['wink']} –Ø –Ω–µ –∑–∞–±—É–¥—É –Ω–∞–≥–∞–¥–∞—Ç–∏ —Ç–æ–±—ñ!
        """
        
        await update.message.reply_text(message, reply_markup=keyboard)
    
    async def my_photos(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–æ—ó –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–æ—Ç–æ"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ñ–æ—Ç–æ –∑ –±–∞–∑–∏
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT file_id, caption, photo_date FROM photos WHERE user_id = ? ORDER BY created_at DESC LIMIT 5',
                      (user_id,))
        photos = cursor.fetchall()
        conn.close()
        
        if photos:
            # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —Ñ–æ—Ç–æ –æ–¥–Ω–µ –∑–∞ –æ–¥–Ω–∏–º
            for file_id, caption, photo_date in photos:
                try:
                    date_str = datetime.strptime(photo_date, '%Y-%m-%d').strftime('%d.%m.%Y')
                    photo_caption = f"üìÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {date_str}\n"
                    if caption:
                        photo_caption += f"üìù {caption}"
                    
                    await context.bot.send_photo(
                        chat_id=query.message.chat_id,
                        photo=file_id,
                        caption=photo_caption
                    )
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")
            
            message = f"{CAT['excited']} –û—Å—å —Ç–≤–æ—ó –∑–±–µ—Ä–µ–∂–µ–Ω—ñ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—ñ–≤!"
        else:
            message = f"{CAT['sleepy']} –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì∑ –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ", callback_data='photos')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]
        ])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    # === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
    
    async def settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT timezone, morning_time FROM users WHERE user_id = ?', (user_id,))
        result = cursor.fetchone()
        conn.close()
        
        timezone, morning_time = result if result else ('Europe/Kiev', '08:00')
        
        message = f"""
{CAT['cool']} –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:

üåç –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {timezone}
‚è∞ –†–∞–Ω–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {morning_time}

{CAT['thinking']} –©–æ —Ö–æ—á–µ—à –∑–º—ñ–Ω–∏—Ç–∏?
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üåç –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å", callback_data='change_tz')],
            [InlineKeyboardButton("‚è∞ –ó–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å", callback_data='change_time')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]
        ])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def change_timezone_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∑–º—ñ–Ω–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['thinking']} –û–±–µ—Ä–∏ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å:"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üá∫üá¶ –ö–∏—ó–≤", callback_data='tz_Europe/Kiev')],
            [InlineKeyboardButton("üáµüá± –í–∞—Ä—à–∞–≤–∞", callback_data='tz_Europe/Warsaw')],
            [InlineKeyboardButton("üá©üá™ –ë–µ—Ä–ª—ñ–Ω", callback_data='tz_Europe/Berlin')],
            [InlineKeyboardButton("üá¨üáß –õ–æ–Ω–¥–æ–Ω", callback_data='tz_Europe/London')],
            [InlineKeyboardButton("üá∫üá∏ –ù—å—é-–ô–æ—Ä–∫", callback_data='tz_America/New_York')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def change_time_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é –∑–º—ñ–Ω–∏ —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['alarm']} –û–±–µ—Ä–∏ —á–∞—Å —Ä–∞–Ω–∫–æ–≤–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:"
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üåÖ 07:00", callback_data='time_07:00')],
            [InlineKeyboardButton("‚òÄÔ∏è 08:00", callback_data='time_08:00')],
            [InlineKeyboardButton("üåû 09:00", callback_data='time_09:00')],
            [InlineKeyboardButton("üìö 10:00", callback_data='time_10:00')],
            [InlineKeyboardButton("‚ùå –í–∏–º–∫–Ω—É—Ç–∏", callback_data='time_disabled')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='settings')]
        ])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def set_timezone(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å—É"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        timezone = query.data.replace('tz_', '')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ –±–∞–∑—ñ
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET timezone = ? WHERE user_id = ?', (timezone, user_id))
        conn.commit()
        conn.close()
        
        message = f"""
{CAT['excited']} –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –∑–º—ñ–Ω–µ–Ω–æ!

üåç –ù–æ–≤–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {timezone}

{CAT['wink']} –¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –∑–∞ —Ç–≤–æ—ó–º —á–∞—Å–æ–º!
        """
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data='settings')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def set_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å
        timezone = query.data.replace('tz_', '')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ –±–∞–∑—ñ
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET timezone = ? WHERE user_id = ?', (timezone, user_id))
        conn.commit()
        conn.close()
        
        message = f"""
{CAT['excited']} –ß–∞—Å–æ–≤–∏–π –ø–æ—è—Å –∑–º—ñ–Ω–µ–Ω–æ!

üåç –ù–æ–≤–∏–π —á–∞—Å–æ–≤–∏–π –ø–æ—è—Å: {timezone}

{CAT['wink']} –¢–µ–ø–µ—Ä –≤—Å—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –±—É–¥—É—Ç—å –∑–∞ —Ç–≤–æ—ó–º —á–∞—Å–æ–º!
        """
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data='settings')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def set_time(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        # –í–∏—Ç—è–≥—É—î–º–æ —á–∞—Å
        time_setting = query.data.replace('time_', '')
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ –±–∞–∑—ñ
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('UPDATE users SET morning_time = ? WHERE user_id = ?', (time_setting, user_id))
        conn.commit()
        conn.close()
        
        if time_setting == 'disabled':
            message = f"""
{CAT['sleepy']} –†–∞–Ω–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ!

–ú–æ–∂–µ—à —É–≤—ñ–º–∫–Ω—É—Ç–∏ —ó—Ö –∑–Ω–æ–≤—É –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö.
            """
        else:
            message = f"""
{CAT['alarm']} –ß–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–º—ñ–Ω–µ–Ω–æ!

‚è∞ –ù–æ–≤–∏–π —á–∞—Å: {time_setting}

{CAT['heart']} –©–æ—Ä–∞–Ω–∫—É –æ {time_setting} —è –Ω–∞–¥—Å–∏–ª–∞—Ç–∏–º—É –ø–ª–∞–Ω –¥–Ω—è!
            """
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", callback_data='settings')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    # === –Ü–ù–®–Ü –û–ë–†–û–ë–ù–ò–ö–ò ===
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ—ó"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['wink']} –û–∫–µ–π, —Å–∫–∞—Å–æ–≤—É—î–º–æ! –©–æ —â–µ –±—É–¥–µ–º–æ —Ä–æ–±–∏—Ç–∏?"
        await query.edit_message_text(message, reply_markup=self.get_keyboard())
        
        context.user_data.clear()
        return ConversationHandler.END
    
    async def handle_text(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
        text = update.message.text.lower()
        
        # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–∏—à–µ –ø—Ä–æ —Ä–æ–∑–∫–ª–∞–¥
        if any(word in text for word in ['—Ä–æ–∑–∫–ª–∞–¥', '–ø–ª–∞–Ω', '—â–æ —Å—å–æ–≥–æ–¥–Ω—ñ', '—â–æ –∑–∞–≤—Ç—Ä–∞', '—Å–ø—Ä–∞–≤–∏']):
            await self.quick_schedule(update, context)
        else:
            # –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –º–∏–ª–æ
            responses = [
                f"{CAT['thinking']} –ú—è—É? –ù–µ –∑—Ä–æ–∑—É–º—ñ–≤... –°–ø—Ä–æ–±—É–π –Ω–∞—Ç–∏—Å–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫—É!",
                f"{CAT['wink']} –ö–æ—Ç–∏–∫–∏ –∫—Ä–∞—â–µ —Ä–æ–∑—É–º—ñ—é—Ç—å –∫–Ω–æ–ø–∫–∏! –¢–∏—Å–Ω–∏ –Ω–∞ –º–µ–Ω—é!",
                f"{CAT['happy']} –ú—É—Ä-–º—É—Ä! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –ø—Ä–æ—Å—Ç—ñ—à–µ!",
                f"{CAT['sleepy']} *–ø–æ—Ç—è–≥—É—î—Ç—å—Å—è* –ö–Ω–æ–ø–∫–∏... –ª—é–±–ª—é –∫–Ω–æ–ø–∫–∏..."
            ]
            
            import random
            message = random.choice(responses)
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='menu')]])
            await update.message.reply_text(message, reply_markup=keyboard)
    
    async def quick_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–®–≤–∏–¥–∫–∏–π –ø–æ–∫–∞–∑ —Ä–æ–∑–∫–ª–∞–¥—É"""
        user_id = update.effective_user.id
        today = datetime.now().date()
        
        # –ü–æ–¥—ñ—ó
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT title, event_time FROM events WHERE user_id = ? AND event_date = ? ORDER BY event_time',
                      (user_id, today))
        events = cursor.fetchall()
        
        # –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        cursor.execute('SELECT name FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                      (today,))
        birthdays = cursor.fetchall()
        conn.close()
        
        message = f"{CAT['calendar']} –û—Å—å —â–æ —É –Ω–∞—Å —Å—å–æ–≥–æ–¥–Ω—ñ:\n\n"
        
        if birthdays:
            message += f"{CAT['birthday']} –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
            for (name,) in birthdays:
                message += f"üéâ {name}\n"
            message += "\n"
        
        if events:
            message += f"{CAT['excited']} –ü–æ–¥—ñ—ó:\n"
            for title, time_str in events:
                time_display = datetime.strptime(time_str, '%H:%M:%S').strftime('%H:%M') if time_str else '–í–µ—Å—å –¥–µ–Ω—å'
                message += f"‚Ä¢ {time_display} - {title}\n"
        else:
            message += f"{CAT['sleepy']} –°—å–æ–≥–æ–¥–Ω—ñ –ø–æ–¥—ñ–π –Ω–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ!"
        
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø–æ–¥—ñ—é", callback_data='add_event'),
                InlineKeyboardButton("üìÖ –¢–∏–∂–¥–µ–Ω—å", callback_data='week')
            ],
            [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='menu')]
        ])
        await update.message.reply_text(message, reply_markup=keyboard)
    
    # === –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø ===
    
    async def morning_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–Ω–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
        current_time = datetime.now().time()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —è–∫—ñ —Ö–æ—á—É—Ç—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–∞—Ä–∞–∑
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('''
            SELECT user_id FROM users 
            WHERE morning_time = ? AND morning_time != 'disabled'
        ''', (current_time.strftime('%H:%M'),))
        users = cursor.fetchall()
        
        today = datetime.now().date()
        
        for (user_id,) in users:
            try:
                # –ü–æ–¥—ñ—ó
                cursor.execute('SELECT title, event_time FROM events WHERE user_id = ? AND event_date = ? ORDER BY event_time',
                              (user_id, today))
                events = cursor.fetchall()
                
                # –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
                cursor.execute('SELECT name, birth_date FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                              (today,))
                birthdays = cursor.fetchall()
                
                message = f"""
{CAT['alarm']} –î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!

{CAT['calendar']} –ü–ª–∞–Ω –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today.strftime('%d.%m.%Y')}):
"""
                
                if birthdays:
                    message += f"\n{CAT['birthday']} –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
                    for name, birth_str in birthdays:
                        birth_date = datetime.strptime(birth_str, '%Y-%m-%d').date()
                        age = today.year - birth_date.year
                        message += f"üéâ {name} ({age} —Ä–æ–∫—ñ–≤)\n"
                
                if events:
                    message += f"\n{CAT['excited']} –¢–≤–æ—ó –ø–æ–¥—ñ—ó:\n"
                    for title, time_str in events:
                        time_display = datetime.strptime(time_str, '%H:%M:%S').strftime('%H:%M') if time_str else '–í–µ—Å—å –¥–µ–Ω—å'
                        message += f"‚Ä¢ {time_display} - {title}\n"
                
                if not events and not birthdays:
                    message += f"\n{CAT['sleepy']} –°—å–æ–≥–æ–¥–Ω—ñ –≤—ñ–ª—å–Ω–∏–π –¥–µ–Ω—å! –ú–æ–∂–Ω–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏"
                
                message += f"\n{CAT['heart']} –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!"
                
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üìÖ –î–µ—Ç–∞–ª—å–Ω—ñ—à–µ", callback_data='today')]])
                
                await context.bot.send_message(
                    chat_id=user_id,
                    text=message,
                    reply_markup=keyboard
                )
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–∞–Ω–∫–æ–≤–æ–≥–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: {e}")
        
        conn.close()
    
    async def birthday_reminder(self, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –æ –ø—ñ–≤–Ω–æ—á—ñ"""
        current_time = datetime.now().time()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞—Ä–∞–∑ –±–ª–∏–∑—å–∫–æ 00:00
        if current_time.hour == 0 and current_time.minute < 5:
            today = datetime.now().date()
            
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ—Ö —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute('SELECT name, birth_date FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                          (today,))
            birthdays = cursor.fetchall()
            
            if birthdays:
                # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
                cursor.execute('SELECT user_id FROM users')
                users = cursor.fetchall()
                
                message = f"""
{CAT['birthday']} –£–í–ê–ì–ê! –°—å–æ–≥–æ–¥–Ω—ñ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!

üéâ –Ü–º–µ–Ω–∏–Ω–Ω–∏–∫–∏:
"""
                
                for name, birth_str in birthdays:
                    birth_date = datetime.strptime(birth_str, '%Y-%m-%d').date()
                    age = today.year - birth_date.year
                    message += f"üéÇ {name} ({age} —Ä–æ–∫—ñ–≤)\n"
                
                message += f"\n{CAT['heart']} –ù–µ –∑–∞–±—É–¥—å –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏!"
                
                keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üéÅ –Ü–¥–µ—ó –ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤", url="https://www.google.com/search?q=—ñ–¥–µ—ó+–ø–æ–¥–∞—Ä—É–Ω–∫—ñ–≤")]])
                
                for (user_id,) in users:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=message,
                            reply_markup=keyboard
                        )
                    except Exception as e:
                        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {e}")
            
            conn.close()
    
    # === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print(f"{CAT['excited']} –ö–æ—Ç–∏–∫-–ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
        
        try:
            # –°–ø—Ä–æ–±–∞ –¥–æ–¥–∞—Ç–∏ job queue –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
            if self.app.job_queue:
                # –†–∞–Ω–∫–æ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —â–æ—Ö–≤–∏–ª–∏–Ω–∏
                self.app.job_queue.run_repeating(self.morning_reminder, interval=60, first=10)
                
                # –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ–∂–Ω—ñ 5 —Ö–≤–∏–ª–∏–Ω –æ –ø—ñ–≤–Ω–æ—á—ñ
                self.app.job_queue.run_repeating(self.birthday_reminder, interval=300, first=10)
                
                print(f"{CAT['alarm']} –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!")
            else:
                print(f"{CAT['thinking']} JobQueue –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π, –ø—Ä–∞—Ü—é—î–º–æ –±–µ–∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")
            
            print(f"{CAT['happy']} –ö–æ—Ç–∏–∫ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏!")
            self.app.run_polling()
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}")
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

# === –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø ===

def main():
    # –í–ö–ê–ñ–ò –°–í–Ü–ô –¢–û–ö–ï–ù –¢–£–¢!
    TOKEN = "YOUR_BOT_TOKEN_HERE"
    
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –ü–û–ú–ò–õ–ö–ê: –í–∫–∞–∂–∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print()
        print("1. –°—Ç–≤–æ—Ä–∏ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather –≤ Telegram")
        print("2. –°–∫–æ–ø—ñ—é–π —Ç–æ–∫–µ–Ω")
        print("3. –ó–∞–º—ñ–Ω—å 'YOUR_BOT_TOKEN_HERE' –Ω–∞ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω")
        print("4. –ó–±–µ—Ä–µ–∂–∏ —Ñ–∞–π–ª —ñ –∑–∞–ø—É—Å—Ç–∏ –∑–Ω–æ–≤—É")
        print()
        print("–ü—Ä–∏–∫–ª–∞–¥:")
        print('TOKEN = "1234567890:ABCdefGHIjklMNOpqrSTUvwxyz-1234567890"')
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    bot = CatPlannerBot(TOKEN)
    bot.run()

if __name__ == "__main__":
    main()
        
        context.user_data.clear()
        return ConversationHandler.END
    
    # === –î–ù–Ü –ù–ê–†–û–î–ñ–ï–ù–ù–Ø ===
    
    async def start_add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–Ω—è –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        message = f"{CAT['birthday']} –Ø–∫ –∑–≤–∞—Ç–∏ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∞? –ù–∞–ø–∏—à–∏ —ñ–º'—è:"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data='cancel')]])
        await query.edit_message_text(message, reply_markup=keyboard)
        
        return ADDING_BIRTHDAY_NAME
    
    async def get_birthday_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç—Ä–∏–º—É—î–º–æ —ñ–º'—è —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∞"""
        context.user_data['birthday_name'] = update.message.text
        
        message = f"{CAT['calendar']} –ö–æ–ª–∏ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è?\n\n–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.03.1995)"
        await update.message.reply_text(message)
        
        return ADDING_BIRTHDAY_DATE
    
    async def save_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
        date_text = update.message.text.strip()
        
        try:
            birth_date = datetime.strptime(date_text, '%d.%m.%Y').date()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
            user_id = update.effective_user.id
            conn = sqlite3.connect(self.db_name)
            cursor = conn.cursor()
            cursor.execute('INSERT INTO birthdays (user_id, name, birth_date) VALUES (?, ?, ?)',
                          (user_id, context.user_data['birthday_name'], birth_date))
            conn.commit()
            conn.close()
            
            today = datetime.now().date()
            age = today.year - birth_date.year
            if (today.month, today.day) < (birth_date.month, birth_date.day):
                age -= 1
            
            message = f"""
{CAT['birthday']} –î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –¥–æ–¥–∞–Ω–æ!

üéâ **{context.user_data['birthday_name']}**
üìÖ –î–∞—Ç–∞: {birth_date.strftime('%d.%m.%Y')}
üéÇ –í—ñ–∫: {age} —Ä–æ–∫—ñ–≤

{CAT['heart']} –Ø –Ω–∞–≥–∞–¥–∞—é —Ç–æ–±—ñ –æ 00:00 –≤ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è!
            """
            
            keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='menu')]])
            await update.message.reply_text(message, reply_markup=keyboard)
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except ValueError:
            await update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 15.03.1995)")
            return ADDING_BIRTHDAY_DATE
    
    # === –ü–ï–†–ï–ì–õ–Ø–î –Ü–ù–§–û–†–ú–ê–¶–Ü–á ===
    
    async def today(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        today = datetime.now().date()
        
        # –ü–æ–¥—ñ—ó
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT title, description, event_time FROM events WHERE user_id = ? AND event_date = ? ORDER BY event_time',
                      (user_id, today))
        events = cursor.fetchall()
        
        # –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
        cursor.execute('SELECT name, birth_date FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                      (today,))
        birthdays = cursor.fetchall()
        conn.close()
        
        message = f"{CAT['calendar']} –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ ({today.strftime('%d.%m.%Y')}):\n\n"
        
        if birthdays:
            message += f"{CAT['birthday']} –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n"
            for name, birth_str in birthdays:
                birth_date = datetime.strptime(birth_str, '%Y-%m-%d').date()
                age = today.year - birth_date.year
                message += f"üéâ {name} ({age} —Ä–æ–∫—ñ–≤)\n"
            message += "\n"
        
        if events:
            message += f"{CAT['excited']} –ü–æ–¥—ñ—ó:\n"
            for title, description, time_str in events:
                time_display = datetime.strptime(time_str, '%H:%M:%S').strftime('%H:%M') if time_str else '–í–µ—Å—å –¥–µ–Ω—å'
                message += f"‚Ä¢ {time_display} - {title}\n"
                if description:
                    message += f"  {description}\n"
        else:
            message += f"{CAT['sleepy']} –ü–æ–∫–∏ –Ω—ñ—è–∫–∏—Ö –ø–æ–¥—ñ–π –Ω–µ–º–∞—î. –ß–∞—Å –≤—ñ–¥–ø–æ—á–∏—Ç–∏!"
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def week(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        today = datetime.now().date()
        
        message = f"{CAT['calendar']} –†–æ–∑–∫–ª–∞–¥ –Ω–∞ —Ç–∏–∂–¥–µ–Ω—å:\n\n"
        
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        for i in range(7):
            date = today + timedelta(days=i)
            day_names = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', "–ü'—è—Ç–Ω–∏—Ü—è", '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
            day_name = day_names[date.weekday()]
            
            # –ü–æ–¥—ñ—ó
            cursor.execute('SELECT title, event_time FROM events WHERE user_id = ? AND event_date = ? ORDER BY event_time',
                          (user_id, date))
            events = cursor.fetchall()
            
            # –î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
            cursor.execute('SELECT name FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                          (date,))
            birthdays = cursor.fetchall()
            
            message += f"üìÖ **{day_name}, {date.strftime('%d.%m')}**\n"
            
            if birthdays:
                for (name,) in birthdays:
                    message += f"üéÇ {name}\n"
            
            if events:
                for title, time_str in events:
                    time_display = datetime.strptime(time_str, '%H:%M:%S').strftime('%H:%M') if time_str else '–í–µ—Å—å –¥–µ–Ω—å'
                    message += f"‚Ä¢ {time_display} - {title}\n"
            
            if not events and not birthdays:
                message += f"{CAT['sleepy']} –í—ñ–ª—å–Ω–∏–π –¥–µ–Ω—å\n"
            
            message += "\n"
        
        conn.close()
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def my_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–æ—ó –ø–æ–¥—ñ—ó"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id
        
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('SELECT title, description, event_date, event_time FROM events WHERE user_id = ? ORDER BY event_date DESC, event_time DESC LIMIT 10',
                      (user_id,))
        events = cursor.fetchall()
        conn.close()
        
        message = f"{CAT['calendar']} –¢–≤–æ—ó –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó:\n\n"
        
        if events:
            for title, description, date_str, time_str in events:
                date = datetime.strptime(date_str, '%Y-%m-%d').strftime('%d.%m.%Y')
                time_display = datetime.strptime(time_str, '%H:%M:%S').strftime('%H:%M') if time_str else '–í–µ—Å—å –¥–µ–Ω—å'
                message += f"üìÖ {date} - {time_display}\n"
                message += f"üìù **{title}**\n"
                if description:
                    message += f"   {description}\n"
                message += "\n"
        else:
            message += f"{CAT['sleepy']} –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö –ø–æ–¥—ñ–π"
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
        query = update.callback_query
        await query.answer()
        
        today = datetime.now().date()
        message = f"{CAT['birthday']} –ù–∞–π–±–ª–∏–∂—á—ñ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n\n"
        
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        
        found = False
        for i in range(30):
            check_date = today + timedelta(days=i)
            cursor.execute('SELECT name, birth_date FROM birthdays WHERE strftime("%m-%d", birth_date) = strftime("%m-%d", ?)',
                          (check_date,))
            day_birthdays = cursor.fetchall()
            
            if day_birthdays:
                found = True
                if i == 0:
                    date_str = "–°—å–æ–≥–æ–¥–Ω—ñ"
                elif i == 1:
                    date_str = "–ó–∞–≤—Ç—Ä–∞"
                else:
                    day_names = ['–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', '–í—ñ–≤—Ç–æ—Ä–æ–∫', '–°–µ—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä', "–ü'—è—Ç–Ω–∏—Ü—è", '–°—É–±–æ—Ç–∞', '–ù–µ–¥—ñ–ª—è']
                    day_name = day_names[check_date.weekday()]
                    date_str = f"{check_date.strftime('%d.%m')} ({day_name})"
                
                message += f"üìÖ **{date_str}:**\n"
                for name, birth_str in day_birthdays:
                    birth_date = datetime.strptime(birth_str, '%Y-%m-%d').date()
                    age = check_date.year - birth_date.year
                    message += f"üéÇ {name} ({age} —Ä–æ–∫—ñ–≤)\n"
                message += "\n"
        
        conn.close()
        
        if not found:
            message += f"{CAT['sleepy']} –ù–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –Ω–µ–º–∞—î"
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    # === –§–û–¢–û ===
    
    async def photo_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ú–µ–Ω—é —Ñ–æ—Ç–æ"""
        query = update.callback_query
        await query.answer()
        
        message = f"""
{CAT['thinking']} –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É:

üì∑ –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É, —ñ —è –π–æ–≥–æ –∑–±–µ—Ä–µ–∂—É!
üìù –ú–æ–∂–µ—à –¥–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å –¥–æ —Ñ–æ—Ç–æ
üìÖ –Ø –∑–∞–ø–∞–º'—è—Ç–∞—é –¥–∞—Ç—É –∫–æ–ª–∏ —Ç–∏ –π–æ–≥–æ –Ω–∞–¥—ñ—Å–ª–∞–≤

–ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ —Ñ–æ—Ç–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º!
        """
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìã –ú–æ—ó —Ñ–æ—Ç–æ", callback_data='my_photos')],
            [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data='menu')]
        ])
        await query.edit_message_text(message, reply_markup=keyboard)
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–∫–∞ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        photo = update.message.photo[-1]  # –ù–∞–π–±—ñ–ª—å—à–µ —Ñ–æ—Ç–æ
        caption = update.message.caption or ""
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –±–∞–∑—É
        conn = sqlite3.connect(self.db_name)
        cursor = conn.cursor()
        cursor.execute('INSERT INTO photos (user_id, file_id, caption) VALUES (?, ?, ?)',
                      (user_id, photo.file_id, caption))
        conn.commit()
        conn.close()
        
        message = f"""
{CAT['excited']} –§–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É –∑–±–µ—Ä–µ–∂–µ–Ω–æ!

üì∑ –Ø –∑–∞–ø–∞–º'—è—Ç–∞–≤ —Ç–≤–æ—î —Ñ–æ—Ç–æ —Ä–æ–∑–∫–ª–∞–¥—É
{f"üìù –ü—ñ–¥–ø–∏—Å: {caption}" if caption else ""}
üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}

{CAT['wink']} –¢–µ–ø–µ—Ä —è –º–æ–∂—É –ø–æ–∫–∞–∑–∞—Ç–∏ –π–æ–≥–æ –∫–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ!
        """
        
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é", callback_data='menu')]])
        await update.message.reply_text(message, reply_markup=keyboard)
